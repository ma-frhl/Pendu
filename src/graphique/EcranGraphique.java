import java.util.*;
import java.io.*;
import java.awt.*;
import java.awt.image.*;
import java.awt.event.*;
import javax.imageio.*;
import java.net.URL;

/**
 * Affichage graphique haute resolution en Java.<br>
 * Les fonctionnalites fournies sont les suivantes:<br>
 *   - Parametrage et ouverture d'une fenetre de dessin<br>
 *   - Changement de la taille de la fenetre de dessin<br>
 *   - Activation/desactivation du changement de la taille de la fenetre de dessin par l'utilisateur<br>
 *   - Choix de la couleur de trace<br>
 *   - Trace d'un pixel selon la couleur de trace<br>
 *   - Trace d'un segment de droite selon la couleur de trace<br>
 *   - Trace d'un rectangle selon la couleur de trace<br>
 *   - Remplissage d'un rectangle selon la couleur de trace<br>
 *   - Trace d'un cercle selon la couleur de trace<br>
 *   - Remplissage d'un cercle selon la couleur de trace<br>
 *   - Trace d'une chaine de caracteres selon la couleur de trace<br>
 *   - Trace d'une image<br>
 *   - Activation/desactivation du mode de trace "ou exclusif"<br>
 *   - Activation/desactivation du mode de trace "alpha blending" (transparence)<br>
 *   - Choix de la couleur d'effacement de la zone de trace<br>
 *   - Effacement de la zone de trace avec la couleur d'effacement<br>
 *   - Chargement et telechargement d'une image au format png<br>
 *   - Temporisation d'execution pendant une periode de temps comptee en milli-secondes<br>
 *   - Recuperation des touches de clavier frappees<br>
 *   - Recuperation des boutons de souris utilises<br>
 *   - Recuperation des positions en x et en y de la souris<br>
 * <br>
 * Apres ouverture de la fenetre de dessin, la creation d'une image suit le schema suivant:<br>
 *   - Effacement de l'image<br>
 *   - Execution de tous les appels de fonction correspondant aux elements graphiques a tracer<br>
 *   - Appel a la fonction EcranGraphique.flush() pour afficher l'image obtenue<br>
 * La fenetre reste ouverte jusqu'a ce que l'instruction EcranGraphique.exit() soit executee qui entraine sa fermeture et la terminaison de l'application.<br>
 * <br>
 * Les coordonnees utilisees sont comptees en pixels.<br>
 * Le repere d'affichage est oriente avec l'axe des x en direction de la droite
 * et l'axe des y en direction du bas de la fenetre d'affichage.<br>
 * L'origine est situee en haut a gauche de la fenetre.
 *
 * @author Nicolas JANEY
 * @author nicolas.janey@univ-fcomte.fr
 * @version 1.0, 01/01/13
 */

public class EcranGraphique {

  /**
    * Police de caracteres "Symbol".
    */
  public static final int SYMBOL8x13 = 1;

  /**
    * Police de caracteres "Colaba".
    */
  public static final int COLABA8x13 = 3;

  private static Vector <Character> key = new Vector<Character>();
  private static Vector <Integer> specialKey = new Vector<Integer>();
  private static int mouseButton = -1;
  private static int mouseState = 0;
  private static int xMouse = -1;
  private static int yMouse = -1;
  private static boolean xorState = false;
  private static boolean alphaBlendingState = false;

  private static short symbol[][] = {
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/* ! */  {0x00,0x10,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00},
/* " */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28,0x28,0x28,0x00,0x00},
/* # */  {0x00,0x00,0x00,0x48,0xfc,0x48,0x48,0xfc,0x48,0x00,0x00,0x00,0x00},
/* $ */  {0x00,0x28,0x7c,0xaa,0x2a,0x2a,0x5c,0xa8,0xa8,0xaa,0x7c,0x28,0x00},
/* % */  {0x00,0x0c,0x12,0x92,0x4c,0x20,0x10,0x08,0x64,0x92,0x90,0x60,0x00},
/* & */  {0x00,0x76,0x88,0x94,0x92,0x60,0x20,0x20,0x40,0x40,0x30,0x00,0x00},
/* ' */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x18,0x18,0x00,0x00},
/* ( */  {0x00,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x00},
/* ) */  {0x00,0x10,0x08,0x08,0x04,0x04,0x04,0x04,0x04,0x08,0x08,0x10,0x00},
/* * */  {0x00,0x00,0x10,0x54,0x38,0xfe,0x38,0x54,0x10,0x00,0x00,0x00,0x00},
/* + */  {0x00,0x00,0x10,0x10,0x10,0xfe,0x10,0x10,0x10,0x00,0x00,0x00,0x00},
/* , */  {0x30,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/* - */  {0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/* . */  {0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/* / */  {0x00,0x80,0x80,0x40,0x20,0x20,0x10,0x08,0x08,0x04,0x02,0x02,0x00},
/* 0 */  {0x00,0x38,0x44,0x82,0xc2,0xa2,0x92,0x8a,0x86,0x82,0x44,0x38,0x00},
/* 1 */  {0x00,0xfe,0x10,0x10,0x10,0x10,0x10,0x10,0x90,0x50,0x30,0x10,0x00},
/* 2 */  {0x00,0xfe,0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x02,0x82,0x7c,0x00},
/* 3 */  {0x00,0x7c,0x82,0x02,0x02,0x02,0x7c,0x02,0x02,0x02,0x82,0x7c,0x00},
/* 4 */  {0x04,0x04,0x04,0x04,0x04,0xfe,0x44,0x24,0x24,0x14,0x0c,0x04,0x00},
/* 5 */  {0x00,0x7c,0x82,0x02,0x02,0x02,0xfc,0x80,0x80,0x80,0x80,0xfe,0x00},
/* 6 */  {0x00,0x7c,0x82,0x82,0x82,0x82,0xfc,0x80,0x80,0x80,0x82,0x7e,0x00},
/* 7 */  {0x00,0x40,0x40,0x40,0x40,0x20,0x10,0x08,0x04,0x02,0x02,0xfe,0x00},
/* 8 */  {0x00,0x7c,0x82,0x82,0x82,0x82,0x7c,0x82,0x82,0x82,0x82,0x7c,0x00},
/* 9 */  {0x00,0x7c,0x82,0x02,0x02,0x02,0x7e,0x82,0x82,0x82,0x82,0x7c,0x00},
/* : */  {0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00},
/* ; */  {0x30,0x18,0x18,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00},
/* < */  {0x00,0x04,0x08,0x10,0x20,0x40,0x80,0x40,0x20,0x10,0x08,0x04,0x00},
/* = */  {0x00,0x00,0x00,0x00,0x00,0xfc,0x00,0xfc,0x00,0x00,0x00,0x00,0x00},
/* > */  {0x00,0x80,0x40,0x20,0x10,0x08,0x04,0x08,0x10,0x20,0x40,0x80,0x00},
/* ? */  {0x00,0x10,0x00,0x10,0x10,0x08,0x04,0x02,0x02,0x82,0x82,0x7c,0x00},
/* @ */  {0x00,0x3e,0x40,0x9c,0xa2,0xa2,0x9a,0x82,0x7c,0x00,0x00,0x00,0x00},
/* A */{0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xff,0xc3,0xc3,0xc3,0x66,0x3c,0x18},
/* B */{0x00,0x00,0xfe,0xc7,0xc3,0xc3,0xc7,0xfe,0xc7,0xc3,0xc3,0xc7,0xfe},
/* C */{0x00,0x00,0x7e,0xe7,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xe7,0x7e},
/* D */{0x00,0x00,0xfc,0xce,0xc7,0xc3,0xc3,0xc3,0xc3,0xc3,0xc7,0xce,0xfc},
/* E */{0x00,0x00,0xff,0xc0,0xc0,0xc0,0xc0,0xfc,0xc0,0xc0,0xc0,0xc0,0xff},
/* F */{0x00,0x00,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xfc,0xc0,0xc0,0xc0,0xff},
/* G */{0x00,0x00,0x7e,0xe7,0xc3,0xc3,0xcf,0xc0,0xc0,0xc0,0xc0,0xe7,0x7e},
/* H */{0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xff,0xc3,0xc3,0xc3,0xc3,0xc3},
/* I */{0x00,0x00,0x7e,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7e},
/* J */{0x00,0x00,0x7c,0xee,0xc6,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06},
/* K */{0x00,0x00,0xc3,0xc6,0xcc,0xd8,0xf0,0xe0,0xf0,0xd8,0xcc,0xc6,0xc3},
/* L */{0x00,0x00,0xff,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0},
/* M */{0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xdb,0xff,0xff,0xe7,0xc3},
/* N */{0x00,0x00,0xc7,0xc7,0xcf,0xcf,0xdf,0xdb,0xfb,0xf3,0xf3,0xe3,0xe3},
/* O */{0x00,0x00,0x7e,0xe7,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xe7,0x7e},
/* P */{0x00,0x00,0xc0,0xc0,0xc0,0xc0,0xc0,0xfe,0xc7,0xc3,0xc3,0xc7,0xfe},
/* Q */{0x00,0x00,0x3f,0x6e,0xdf,0xdb,0xc3,0xc3,0xc3,0xc3,0xc3,0x66,0x3c},
/* R */{0x00,0x00,0xc3,0xc6,0xcc,0xd8,0xf0,0xfe,0xc7,0xc3,0xc3,0xc7,0xfe},
/* S */{0x00,0x00,0x7e,0xe7,0x03,0x03,0x07,0x7e,0xe0,0xc0,0xc0,0xe7,0x7e},
/* T */{0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xff},
/* U */{0x00,0x00,0x7e,0xe7,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3},
/* V */{0x00,0x00,0x18,0x3c,0x3c,0x66,0x66,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3},
/* W */{0x00,0x00,0xc3,0xe7,0xff,0xff,0xdb,0xdb,0xc3,0xc3,0xc3,0xc3,0xc3},
/* X */{0x00,0x00,0xc3,0x66,0x66,0x3c,0x3c,0x18,0x3c,0x3c,0x66,0x66,0xc3},
/* Y */{0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x3c,0x3c,0x66,0x66,0xc3},
/* Z */{0x00,0x00,0xff,0xc0,0xc0,0x60,0x30,0x7e,0x0c,0x06,0x03,0x03,0xff},
/* [ */  {0x00,0x00,0x1c,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1c,0x00},
/* \ */  {0x00,0x02,0x02,0x04,0x08,0x08,0x10,0x20,0x20,0x40,0x80,0x80,0x00},
/* ] */  {0x00,0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x70,0x00},
/* ^ */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x82,0x44,0x28,0x10,0x00},
/* _ */  {0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/* ` */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0x18,0x18,0x00,0x00},
/* a */  {0x00,0x72,0x8a,0x84,0x84,0x8a,0x4a,0x30,0x00,0x00,0x00,0x00,0x00},
/* b */  {0x80,0x9c,0xa2,0x42,0x42,0x44,0x58,0x64,0x22,0x22,0x1c,0x00,0x00},
/* c */  {0x00,0x8c,0x48,0x48,0x30,0x30,0x30,0x28,0x28,0x44,0xc4,0x00,0x00},
/* d */  {0x00,0x70,0x88,0x88,0x88,0x88,0x50,0x20,0x40,0x48,0x30,0x00,0x00},
/* e */  {0x00,0x70,0x88,0x80,0x40,0x30,0x40,0x48,0x38,0x00,0x00,0x00,0x00},
/* f */  {0x20,0x20,0x20,0x78,0x94,0x92,0x92,0x52,0x3c,0x08,0x08,0x08,0x00},
/* g */  {0x20,0x20,0x10,0x10,0x18,0x18,0x18,0x24,0xa4,0x44,0x00,0x00,0x00},
/* h */  {0x08,0x08,0x08,0x24,0x24,0x24,0x12,0x12,0xb2,0x4c,0x00,0x00,0x00},
/* i */  {0x00,0x00,0x00,0x10,0x28,0x20,0x20,0x10,0x10,0x10,0x00,0x00,0x00},
/* j */  {0x00,0x40,0x40,0x78,0xa4,0xa2,0x92,0x92,0x52,0x4c,0x00,0x00,0x00},
/* k */  {0x00,0x00,0x00,0x98,0x90,0xf0,0x50,0x50,0x48,0x48,0x00,0x00,0x00},
/* l */  {0x00,0x00,0x8c,0x88,0x88,0x50,0x50,0x50,0x20,0x20,0x40,0xc0,0x00},
/* m */  {0x00,0x80,0x80,0x80,0x74,0x4a,0x48,0x48,0x24,0x24,0x24,0x00,0x00},
/* n */  {0x00,0x00,0x00,0xc0,0xa0,0x90,0x90,0x48,0x48,0xc8,0x00,0x00,0x00},
/* o */  {0x00,0x00,0x00,0x60,0x90,0x88,0x88,0x88,0x48,0x30,0x00,0x00,0x00},
/* p */  {0x00,0x00,0x00,0x8c,0x48,0x48,0x24,0x24,0xa4,0x7e,0x00,0x00,0x00},
/* q */  {0x00,0x30,0x48,0x84,0x84,0x84,0xfc,0x84,0x84,0x84,0x48,0x30,0x00},
/* r */  {0x00,0x80,0x80,0x80,0x70,0x48,0x44,0x24,0x24,0x24,0x18,0x00,0x00},
/* s */  {0x00,0x00,0x00,0x60,0x90,0x88,0x88,0x88,0x48,0x3e,0x00,0x00,0x00},
/* t */  {0x00,0x00,0x0c,0x40,0x20,0x20,0x20,0x20,0xa0,0x78,0x00,0x00,0x00},
/* u */  {0x00,0x00,0x00,0xc0,0xa0,0x90,0x90,0x48,0x48,0xc8,0x00,0x00,0x00},
/* v */  {0x00,0x00,0x00,0x6c,0x92,0x91,0x89,0x49,0x41,0xFF,0x00,0x00,0x00},
/* w */  {0x00,0x00,0x00,0x6c,0x92,0x91,0x89,0x49,0x41,0x22,0x00,0x00,0x00},
/* x */  {0x30,0x08,0x70,0x80,0x80,0x70,0xb0,0x80,0x80,0x70,0xb0,0x80,0x00},
/* y */  {0x00,0x20,0x20,0x20,0x78,0x94,0x94,0x52,0x4a,0xca,0x08,0x08,0x00},
/* z */  {0x30,0x08,0x70,0x80,0x80,0x80,0x80,0x80,0x40,0x70,0xb0,0x80,0x00},
/* { */  {0x00,0x0c,0x10,0x10,0x10,0x10,0x60,0x10,0x10,0x10,0x10,0x0c,0x00},
/* | */  {0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00},
/* } */  {0x00,0x60,0x10,0x10,0x10,0x10,0x0c,0x10,0x10,0x10,0x10,0x60,0x00},
/* ~ */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x89,0x91,0x60,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00} 
  };
  
  private static short regular8x13[][] = {
/*   */{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/* ! */{0x00,0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18},
/* " */{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x36,0x36,0x36,0x36},
/* # */{0x00,0x00,0x00,0x66,0x66,0xff,0x66,0x66,0xff,0x66,0x66,0x00,0x00},
/* $ */{0x00,0x00,0x18,0x7e,0xff,0x1b,0x1f,0x7e,0xf8,0xd8,0xff,0x7e,0x18},
/* % */{0x00,0x00,0x0e,0x1b,0xdb,0x6e,0x30,0x18,0x0c,0x76,0xdb,0xd8,0x70},
/* & */{0x00,0x00,0x7f,0xc6,0xcf,0xd8,0x70,0x70,0xd8,0xcc,0xcc,0x6c,0x38},
/* ' */{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x1c,0x0c,0x0e},
/* ( */{0x00,0x00,0x0c,0x18,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x18,0x0c},
/* ) */{0x00,0x00,0x30,0x18,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x18,0x30},
/* * */{0x00,0x00,0x00,0x00,0x99,0x5a,0x3c,0xff,0x3c,0x5a,0x99,0x00,0x00},
/* + */{0x00,0x00,0x00,0x18,0x18,0x18,0xff,0xff,0x18,0x18,0x18,0x00,0x00},
/* , */{0x00,0x00,0x30,0x18,0x1c,0x1c,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/* - */{0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x00,0x00,0x00,0x00,0x00},
/* . */{0x00,0x00,0x00,0x38,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/* / */{0x00,0x60,0x60,0x30,0x30,0x18,0x18,0x0c,0x0c,0x06,0x06,0x03,0x03},
/* 0 */{0x00,0x00,0x3c,0x66,0xc3,0xe3,0xf3,0xdb,0xcf,0xc7,0xc3,0x66,0x3c},
/* 1 */{0x00,0x00,0x7e,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x78,0x38,0x18},
/* 2 */{0x00,0x00,0xff,0xc0,0xc0,0x60,0x30,0x18,0x0c,0x06,0x03,0xe7,0x7e},
/* 3 */{0x00,0x00,0x7e,0xe7,0x03,0x03,0x07,0x7e,0x07,0x03,0x03,0xe7,0x7e},
/* 4 */{0x00,0x00,0x0c,0x0c,0x0c,0x0c,0x0c,0xff,0xcc,0x6c,0x3c,0x1c,0x0c},
/* 5 */{0x00,0x00,0x7e,0xe7,0x03,0x03,0x07,0xfe,0xc0,0xc0,0xc0,0xc0,0xff},
/* 6 */{0x00,0x00,0x7e,0xe7,0xc3,0xc3,0xc7,0xfe,0xc0,0xc0,0xc0,0xe7,0x7e},
/* 7 */{0x00,0x00,0x30,0x30,0x30,0x30,0x18,0x0c,0x06,0x03,0x03,0x03,0xff},
/* 8 */{0x00,0x00,0x7e,0xe7,0xc3,0xc3,0xe7,0x7e,0xe7,0xc3,0xc3,0xe7,0x7e},
/* 9 */{0x00,0x00,0x7e,0xe7,0x03,0x03,0x03,0x7f,0xe7,0xc3,0xc3,0xe7,0x7e},
/* : */{0x00,0x00,0x00,0x38,0x38,0x00,0x00,0x38,0x38,0x00,0x00,0x00,0x00},
/* ; */{0x00,0x00,0x30,0x18,0x1c,0x1c,0x00,0x00,0x1c,0x1c,0x00,0x00,0x00},
/* < */{0x00,0x00,0x06,0x0c,0x18,0x30,0x60,0xc0,0x60,0x30,0x18,0x0c,0x06},
/* = */{0x00,0x00,0x00,0x00,0xff,0xff,0x00,0xff,0xff,0x00,0x00,0x00,0x00},
/* > */{0x00,0x00,0x60,0x30,0x18,0x0c,0x06,0x03,0x06,0x0c,0x18,0x30,0x60},
/* ? */{0x00,0x00,0x18,0x00,0x00,0x18,0x18,0x0c,0x06,0x03,0xc3,0xc3,0x7e},
/* @ */{0x00,0x00,0x3f,0x60,0xcf,0xdb,0xd3,0xdd,0xc3,0x7e,0x00,0x00,0x00},
/* A */{0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xff,0xc3,0xc3,0xc3,0x66,0x3c,0x18},
/* B */{0x00,0x00,0xfe,0xc7,0xc3,0xc3,0xc7,0xfe,0xc7,0xc3,0xc3,0xc7,0xfe},
/* C */{0x00,0x00,0x7e,0xe7,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xe7,0x7e},
/* D */{0x00,0x00,0xfc,0xce,0xc7,0xc3,0xc3,0xc3,0xc3,0xc3,0xc7,0xce,0xfc},
/* E */{0x00,0x00,0xff,0xc0,0xc0,0xc0,0xc0,0xfc,0xc0,0xc0,0xc0,0xc0,0xff},
/* F */{0x00,0x00,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xfc,0xc0,0xc0,0xc0,0xff},
/* G */{0x00,0x00,0x7e,0xe7,0xc3,0xc3,0xcf,0xc0,0xc0,0xc0,0xc0,0xe7,0x7e},
/* H */{0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xff,0xc3,0xc3,0xc3,0xc3,0xc3},
/* I */{0x00,0x00,0x7e,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7e},
/* J */{0x00,0x00,0x7c,0xee,0xc6,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x06},
/* K */{0x00,0x00,0xc3,0xc6,0xcc,0xd8,0xf0,0xe0,0xf0,0xd8,0xcc,0xc6,0xc3},
/* L */{0x00,0x00,0xff,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0},
/* M */{0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xdb,0xff,0xff,0xe7,0xc3},
/* N */{0x00,0x00,0xc7,0xc7,0xcf,0xcf,0xdf,0xdb,0xfb,0xf3,0xf3,0xe3,0xe3},
/* O */{0x00,0x00,0x7e,0xe7,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xe7,0x7e},
/* P */{0x00,0x00,0xc0,0xc0,0xc0,0xc0,0xc0,0xfe,0xc7,0xc3,0xc3,0xc7,0xfe},
/* Q */{0x00,0x00,0x3f,0x6e,0xdf,0xdb,0xc3,0xc3,0xc3,0xc3,0xc3,0x66,0x3c},
/* R */{0x00,0x00,0xc3,0xc6,0xcc,0xd8,0xf0,0xfe,0xc7,0xc3,0xc3,0xc7,0xfe},
/* S */{0x00,0x00,0x7e,0xe7,0x03,0x03,0x07,0x7e,0xe0,0xc0,0xc0,0xe7,0x7e},
/* T */{0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xff},
/* U */{0x00,0x00,0x7e,0xe7,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3},
/* V */{0x00,0x00,0x18,0x3c,0x3c,0x66,0x66,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3},
/* W */{0x00,0x00,0xc3,0xe7,0xff,0xff,0xdb,0xdb,0xc3,0xc3,0xc3,0xc3,0xc3},
/* X */{0x00,0x00,0xc3,0x66,0x66,0x3c,0x3c,0x18,0x3c,0x3c,0x66,0x66,0xc3},
/* Y */{0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x3c,0x3c,0x66,0x66,0xc3},
/* Z */{0x00,0x00,0xff,0xc0,0xc0,0x60,0x30,0x7e,0x0c,0x06,0x03,0x03,0xff},
/* [ */{0x00,0x00,0x3c,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3c},
/* \ */{0x00,0x03,0x03,0x06,0x06,0x0c,0x0c,0x18,0x18,0x30,0x30,0x60,0x60},
/* ] */{0x00,0x00,0x3c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x3c},
/* ^ */{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0x66,0x3c,0x18},
/* _ */{0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/* ` */{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x38,0x30,0x70},
/* a */{0x00,0x00,0x7f,0xc3,0xc3,0x7f,0x03,0xc3,0x7e,0x00,0x00,0x00,0x00},
/* b */{0x00,0x00,0xfe,0xc3,0xc3,0xc3,0xc3,0xfe,0xc0,0xc0,0xc0,0xc0,0xc0},
/* c */{0x00,0x00,0x7e,0xc3,0xc0,0xc0,0xc0,0xc3,0x7e,0x00,0x00,0x00,0x00},
/* d */{0x00,0x00,0x7f,0xc3,0xc3,0xc3,0xc3,0x7f,0x03,0x03,0x03,0x03,0x03},
/* e */{0x00,0x00,0x7f,0xc0,0xc0,0xfe,0xc3,0xc3,0x7e,0x00,0x00,0x00,0x00},
/* f */{0x00,0x00,0x30,0x30,0x30,0x30,0x30,0xfc,0x30,0x30,0x30,0x33,0x1e},
/* g */{0x7e,0xc3,0x03,0x03,0x7f,0xc3,0xc3,0xc3,0x7e,0x00,0x00,0x00,0x00},
/* h */{0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xfe,0xc0,0xc0,0xc0,0xc0},
/* i */{0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x18,0x00},
/* j */{0x38,0x6c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x0c,0x00},
/* k */{0x00,0x00,0xc6,0xcc,0xf8,0xf0,0xd8,0xcc,0xc6,0xc0,0xc0,0xc0,0xc0},
/* l */{0x00,0x00,0x7e,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x78},
/* m */{0x00,0x00,0xdb,0xdb,0xdb,0xdb,0xdb,0xdb,0xfe,0x00,0x00,0x00,0x00},
/* n */{0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xfc,0x00,0x00,0x00,0x00},
/* o */{0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00},
/* p */{0xc0,0xc0,0xc0,0xfe,0xc3,0xc3,0xc3,0xc3,0xfe,0x00,0x00,0x00,0x00},
/* q */{0x03,0x03,0x03,0x7f,0xc3,0xc3,0xc3,0xc3,0x7f,0x00,0x00,0x00,0x00},
/* r */{0x00,0x00,0xc0,0xc0,0xc0,0xc0,0xc0,0xe0,0xfe,0x00,0x00,0x00,0x00},
/* s */{0x00,0x00,0xfe,0x03,0x03,0x7e,0xc0,0xc0,0x7f,0x00,0x00,0x00,0x00},
/* t */{0x00,0x00,0x1c,0x36,0x30,0x30,0x30,0x30,0xfc,0x30,0x30,0x30,0x00},
/* u */{0x00,0x00,0x7e,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00},
/* v */{0x00,0x00,0x18,0x3c,0x3c,0x66,0x66,0xc3,0xc3,0x00,0x00,0x00,0x00},
/* w */{0x00,0x00,0xc3,0xe7,0xff,0xdb,0xc3,0xc3,0xc3,0x00,0x00,0x00,0x00},
/* x */{0x00,0x00,0xc3,0x66,0x3c,0x18,0x3c,0x66,0xc3,0x00,0x00,0x00,0x00},
/* y */{0xc0,0x60,0x60,0x30,0x18,0x3c,0x66,0x66,0xc3,0x00,0x00,0x00,0x00},
/* z */{0x00,0x00,0xff,0x60,0x30,0x18,0x0c,0x06,0xff,0x00,0x00,0x00,0x00},
/* { */{0x00,0x00,0x0f,0x18,0x18,0x18,0x38,0xf0,0x38,0x18,0x18,0x18,0x0f},
/* | */{0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18},
/* } */{0x00,0x00,0xf0,0x18,0x18,0x18,0x1c,0x0f,0x1c,0x18,0x18,0x18,0xf0},
/* ~ */{0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x8f,0xf1,0x60,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
/*   */  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00} 
  };

  private static class MyFrame extends Frame
                               implements WindowListener,
			                                    ActionListener,
                                          MouseListener,
                                          MouseMotionListener,
                                          KeyListener  {
    public static boolean open = false;
    public MyCanvas mc;
    public static ScrollPane sp;
    private MenuBar mb = new MenuBar();
    private Menu m1 = new Menu("Fichier");
    private MenuItem mff = new MenuItem("Quitter");

    public void ouvre(int px,int py,int wx,int wy,int tx,int ty,String titre) {
      if ( !open ) {
        open = true;
        mc = new MyCanvas();
        setMenuBar(mb);
        mb.add(m1);
        m1.add(mff);
        mff.addActionListener(this);
        addWindowListener(this);
        addMouseListener(this);
        addMouseMotionListener(this);
        addKeyListener(this);
        setTitle(titre);
        setSize(wx,wy);
        setLocation(px,py);
        sp = new ScrollPane(ScrollPane.SCROLLBARS_ALWAYS);
        sp.add(mc);
        add(sp);
        setVisible(true); }
    }

    public void windowClosed(WindowEvent e) {
    }

    public void windowClosing(WindowEvent e) {
      dispose();
      System.out.println();
      System.exit(0);
    }

    public void windowActivated(WindowEvent e) {
    }

    public void windowDeactivated(WindowEvent e) {
    }

    public void windowDeiconified(WindowEvent e) {
    }

    public void windowIconified(WindowEvent e) {
    }

    public void windowOpened(WindowEvent e) {
    }

    public void actionPerformed(ActionEvent e) {
      if ( e.getSource() == mff ) {
        System.out.println();
        System.exit(0); }
    }
    
    public void mouseClicked(MouseEvent e) {
      mouseState = 2;
      xMouse = e.getX();
      yMouse = e.getY();
      mouseButton = e.getButton();
    }
    
    public void mouseEntered(MouseEvent e) {
      xMouse = e.getX();
      yMouse = e.getY();
    }
    
    public void mouseExited(MouseEvent e) {
      xMouse = -1;
      yMouse = -1;
    }

    public void mousePressed(MouseEvent e) {
      mouseState = 1;
      xMouse = e.getX();
      yMouse = e.getY();
      mouseButton = e.getButton();
    }

    public void mouseReleased(MouseEvent e) {
      mouseState = 0;
      xMouse = e.getX();
      yMouse = e.getY();
      mouseButton = e.getButton();
    }
    
    
    public void mouseDragged(MouseEvent e) {
      xMouse = e.getX();
      yMouse = e.getY();
      mouseButton = e.getButton();
    }

    public void mouseMoved(MouseEvent e) {
      xMouse = e.getX();
      yMouse = e.getY();
    }   

    public void keyPressed(KeyEvent e) {
    }

    public void keyReleased(KeyEvent e) {
      if ( e.isActionKey() ) {
        specialKey.add(new Integer(e.getKeyCode())); }
    }

    public void keyTyped(KeyEvent e) {
      key.add(new Character(e.getKeyChar()));
    }
  }
  
  private static class MyCanvas extends Canvas
                                implements MouseListener,
                                           MouseMotionListener,
                                           KeyListener {
    public static BufferedImage image = null;
    //private static Image offscreen;
    //private static Graphics bufferGraphics;
  
    public MyCanvas() {
      setSize(btx,bty);
      addMouseListener(this);
      addMouseMotionListener(this);
      addKeyListener(this);
    //  offscreen = createImage(btx,bty);
    //  bufferGraphics = offscreen.getGraphics();
    }

    public void update(Graphics g) {
      dessin = true;
      paint(g);
    }

    public void paint(Graphics g) {
      dessin = true;
      image = new BufferedImage(btx,bty,BufferedImage.TYPE_3BYTE_BGR);
      WritableRaster wr = image.getRaster();
      wr.setPixels(0,0,btx,bty,buffer);
      setSize(btx,bty);
      g.drawImage(image,0,0,this);
      dessin = false;
      EcranGraphique.wait(1);
      /*setSize(btx,bty);
      WritableRaster wr = offscreen.getRaster();
      wr.setPixels(0,0,btx,bty,buffer);
      g.drawImage(offscreen,0,0,this);*/
    }
    
    public void mouseClicked(MouseEvent e) {
      mouseState = 2;
      xMouse = e.getX();
      yMouse = e.getY();
      mouseButton = e.getButton();
      EcranGraphique.wait(10);
    }
    
    public void mouseEntered(MouseEvent e) {
      xMouse = e.getX();
      yMouse = e.getY();
      EcranGraphique.wait(1);
    }
    
    public void mouseExited(MouseEvent e) {
      xMouse = -1;
      yMouse = -1;
      EcranGraphique.wait(1);
    }

    public void mousePressed(MouseEvent e) {
      mouseState = 1;
      xMouse = e.getX();
      yMouse = e.getY();
      mouseButton = e.getButton();
      EcranGraphique.wait(1);
    }

    public void mouseReleased(MouseEvent e) {
      mouseState = 0;
      xMouse = e.getX();
      yMouse = e.getY();
      mouseButton = e.getButton();
      EcranGraphique.wait(1);
    }
        
    public void mouseDragged(MouseEvent e) {
      xMouse = e.getX();
      yMouse = e.getY();
      mouseButton = e.getButton();
      EcranGraphique.wait(1);
    }

    public void mouseMoved(MouseEvent e) {
      xMouse = e.getX();
      yMouse = e.getY();
      EcranGraphique.wait(1);
    }   

    public void keyPressed(KeyEvent e) {
      EcranGraphique.wait(1);
    }

    public void keyReleased(KeyEvent e) {
      if ( e.isActionKey() ) {
        specialKey.add(new Integer(e.getKeyCode())); }
      EcranGraphique.wait(1);
    }

    public void keyTyped(KeyEvent e) {
      key.add(new Character(e.getKeyChar()));
      EcranGraphique.wait(1);
    }
  }
  
  private static MyFrame mf = new MyFrame();
  private static int btx;
  private static int bty;
  private static int rouge = 255;
  private static int vert = 255;
  private static int bleu = 255;
  private static double alpha = 1.0;
  private static double malpha = 1.0;
  private static int clearRouge = 0;
  private static int clearVert = 0;
  private static int clearBleu = 0;
  private static int [] buffer;
  private static boolean dessin = false;

  /**
    * Initialisation et ouverture d'une fenetre d'affichage graphique.<br>
    * La fenetre est ouverte et affiche initialement une surface vide a fond noir.<br>
    * Une fois la fenetre ouverte, l'application peut etre arretee via l'option "Quitter" du menu "Fichier".<br>
    * La fonction main peut etre utilisee normalement pour envoyer des ordres a la fenetre.<br>
    * Pour quitter, la fonction main devra executer un EcranGraphique.exit() pour fermer la fenetre et s'interrompre. 
    * 
    *
    * @param px L'abscisse du coin superieur gauche de la fenetre.
    * @param py L'ordonnee du coin superieur gauche de la fenetre.
    * @param wx La resolution (nombre de pixels) en x de la fenetre.
    * @param wy La resolution (nombre de pixels) en y de la fenetre.
    * @param tx La resolution (nombre de pixels) en x du buffer d'affichage.
    * @param ty La resolution (nombre de pixels) en y du buffer d'affichage.
    * @param titre Le titre donne a la fenetre.
    */
  
  public static void init(int px,int py,int wx,int wy,int tx,int ty,String titre) {
    btx = tx;
    bty = ty;
    buffer = new int[tx*ty*3];
    mf.ouvre(px,py,wx,wy,tx,ty,titre);
    clear();
    //flush();
  }

  /**
    * Definition de la couleur de trace (blanc par defaut).
    *
    * @param r La composante de rouge de la couleur de trace ([0,255]).
    * @param v La composante de vert de la couleur de trace ([0,255]).
    * @param b La composante de bleu de la couleur de trace ([0,255]).
    */

  public static void setColor(int r,int v,int b) {
    rouge = r;
    vert = v;
    bleu = b;
  }

  /**
    * Definition de la valeur alpha (transparence).
    *
    * @param a La composante alpha ([0.0,1.0] pour [transparent,opaque]).
    */

  public static void setAlpha(double a) {
    alpha = a;
    malpha = 1.0-alpha;
    if ( alpha < 0.0 ) {
      alpha = 0.0; }
    if ( alpha > 1.0 ) {
      alpha = 1.0; }
  }

  /**
    * Affichage d'un pixel.
    *
    * @param x L'abscisse du pixel.
    * @param y L'ordonnee du pixel.
    */

  public static void drawPixel(int x,int y) {
    drawPixelClip(x,y);
  }

  /**
    * Affichage d'un segment de droite.
    *
    * @param xi L'abscisse du pixel initial.
    * @param yi L'ordonnee du pixel initial.
    * @param xf L'abscisse du pixel final.
    * @param yf L'ordonnee du pixel final.
    */

  public static void drawLine(int xi,int yi,int xf,int yf) {
    double xxi = xi;
    double yyi = yi;
    double xxf = xf;
    double yyf = yf;
    int c1 = code(xxi,yyi,0,0,btx-1,bty-1) ;
    int c2 = code(xxf,yyf,0,0,btx-1,bty-1) ;
    while ( ( !code_nul(c1) || !code_nul(c2) ) && ( pas1commun(c1,c2)  ) ) {
      if ( code_nul(c1) ) {
        { double aux = xxi;
          xxi = xxf;
          xxf = aux; }
        { double aux = yyi;
          yyi = yyf;
          yyf = aux; }
        { int aux = c1;
          c1 = c2;
          c2 = aux; } }
      if ( code1(c1) ) {
        yyi = intersection(xxi,yyi,xxf,yyf,btx-1) ;
        xxi = btx-1 ; }
        else
        if ( code0(c1) ) {
          yyi = intersection(xxi,yyi,xxf,yyf,0) ;
          xxi = 0 ; }
          else
          if ( code3(c1) ) {
            xxi = intersection(yyi,xxi,yyf,xxf,bty-1) ;
            yyi = bty-1 ; }
            else
            if ( code2(c1) ) {
              xxi = intersection(yyi,xxi,yyf,xxf,0) ;
              yyi = 0 ; }
      c1 = code(xxi,yyi,0,0,btx-1,bty-1) ; }
    if ( code_nul(c1) && code_nul(c2) )
      lineSansClip((int) xxi,(int) yyi,(int) xxf,(int) yyf);
  }

  /**
    * Affichage d'un rectangle.
    *
    * @param xi La coordonnee x du coin superieur gauche.
    * @param yi La coordonnee y du coin superieur gauche.
    * @param tx La longueur en x du rectangle.
    * @param ty La longueur en y du rectangle.
    */

  public static void drawRect(int xi,int yi,int tx,int ty) {
    drawLine(xi,yi,xi+tx,yi);
    drawLine(xi,yi,xi,yi+ty);
    drawLine(xi+tx,yi+ty,xi+tx,yi);
    drawLine(xi+tx,yi+ty,xi,yi+ty);
  }
  
    /**
    * Remplissage d'un rectangle.
    *
    * @param xi La coordonnee x du coin superieur gauche.
    * @param yi La coordonnee y du coin superieur gauche.
    * @param tx La longueur en x du rectangle.
    * @param ty La longueur en y du rectangle.
    */
  
  public static void fillRect(int xi,int yi,int tx,int ty) {
    if ( tx > 0 )
      for ( int i = 0 ; i < ty ; i++ ) {
        drawLine(xi,yi+i,xi+tx-1,yi+i); }
  }

  /**
    * Remplissage d'un cercle
    *
    * @param cx L'abscisse du centre du cercle.
    * @param cy L'ordonnee du centre du cercle.
    * @param r Le rayon du cercle.
    */
  
  public static void fillCircle(int cx,int cy,int r) {
    int [] tx = new int[r+1];
    int x,y,d;
    x = 0;
    y = r;
    d = 1 - r;
    tx[y] = x;
    tx[x] = y;
    while ( y > x ) {
      if ( d < 0 )
        d += 2 * x + 3;
        else {
        d += 2 * (x - y) + 5;
        y--; }
      x++;
      tx[y] = x;
      tx[x] = y; }
    drawLine(cx+tx[0],cy,cx-tx[0],cy);
    for ( int i = 1 ; i <= r ; i++ ) {
      drawLine(cx+tx[i],cy+i,cx-tx[i],cy+i);
      drawLine(cx+tx[i],cy-i,cx-tx[i],cy-i); }
    }

  /**
    * Affichage d'un cercle
    *
    * @param cx L'abscisse du centre du cercle.
    * @param cy L'ordonnee du centre du cercle.
    * @param r Le rayon du cercle.
    */
  
  public static void drawCircle(int cx,int cy,int r) {
    int [] tx = new int[r+1];
    int x,y,d;
    x = 0;
    y = r;
    d = 1 - r;
    drawPixelClip(cx,cy+y);
    drawPixelClip(cx,cy-y);
    drawPixelClip(cx+y,cy);
    drawPixelClip(cx-y,cy);
    while ( y > x ) {
      if ( d < 0 )
        d += 2 * x + 3;
        else {
        d += 2 * (x - y) + 5;
        y--; }
      x++;
      drawPixelClip(cx+x,cy+y);
      drawPixelClip(cx+x,cy-y);
      drawPixelClip(cx+y,cy+x);
      drawPixelClip(cx-y,cy+x);
      drawPixelClip(cx-x,cy+y);
      drawPixelClip(cx-x,cy-y);
      drawPixelClip(cx+y,cy-x);
      drawPixelClip(cx-y,cy-x);
      tx[y] = x;
      tx[x] = y; }
    }

  /**
    * Choix de la couleur d'effacement de la fenetre de dessin (noir par defaut).
    *
    * @param r La composante de rouge de la couleur d'effacement ([0,255]).
    * @param v La composante de vert de la couleur d'effacement ([0,255]).
    * @param b La composante de bleu de la couleur d'effacement ([0,255]).
    */
  
  public static void setClearColor(int r,int v,int b) {
    clearRouge = r;
    clearVert = v;
    clearBleu = b;
  }
  
  /**
    * Tracage d'une chaine de caracteres composee uniquement de caracteres non accentues.
    *
    * @param x L'abscisse de trace.
    * @param y L'ordonnee de trace.
    * @param police La police de caractere de trace.
    * @param s La chaine a tracer.
    */  
  public static void drawString(int x,int y,int police,String s) {
    char [] t = s.toCharArray();
    int tx = 0;
    int ty = 0;
    switch (police) {
      case 1:
      case 3:
        tx = 8;
        ty = 13;
        break;
      case 2:
        tx = 7;
        ty = 10;
        break; }
    switch (police) {
      case 1:
        for ( int i = 0 ; i < t.length ; i++ )
          drawCaractere(x+(tx+1)*i,y,tx,ty,symbol[t[i]-32]);
        break;
      case 3:
        for ( int i = 0 ; i < t.length ; i++ )
          drawCaractere(x+(tx+1)*i,y,tx,ty,regular8x13[t[i]-32]);
        break; }
  }

  /**
    * Tracage d'un texte compose uniquement de caracteres non accentues.
    *
    * @param x L'abscisse de trace.
    * @param y L'ordonnee de trace.
    * @param police La police de caractere de trace.
    * @param s La liste a tracer.
    */  
	public static void drawText(int x,int y,int police,Object... s) {
    String st = "";
		for (Object o : s) {
			st += o.toString(); }
    drawString(x,y,police,st);
	}

  /**
    * Tracage d'un texte compose uniquement de caracteres non accentues.
    *
    * @param x L'abscisse de trace.
    * @param y L'ordonnee de trace.
    * @param police La police de caractere de trace.
    * @param format Le format de tracage texte.
    * @param s La liste a tracer.
    */  
	public static void drawText(int x,int y,int police,String format,Object... s) {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    ps.printf(format,s);
    drawText(x,y,police,baos);
	}

  /**
    * Affichage d'un rectangle de pixels dans la fenetre d'affichage.<br>
    * Le tableau passe en parametre decrit l'image a afficher.<br>
    * Il s'agit d'un tableau a deux indices.<br>
    * La taille selon le premier indice est la resolution en x de l'image.<br>
    * La taille selon le second indice est la resolution en y de l'image.<br>
    * Chaque entier contenu dans le tableau decrit un pixel de l'image code en 24 bits<br>
    * au moyen d'une valeur comprise entre 0 et (2^24)-1=16777215.<br>
    * Les 8 bits de poids faible code la composante rouge.<br>
    * Les 8 bits de poids intermediaire code la composante verte.<br>
    * Les 8 bits de poids fort code la composante bleue.<br>
    * L'alpha blending et le mode xor ne sont pas geres.
    *
    * @param px La position en x du pixel superieur gauche de l'image dessinee.
    * @param py La position en y du pixel superieur gauche de l'image dessinee.
    * @param img Le tableau de int decrivant l'image.
    */
  public static void drawImage(int px,int py,int [][] img) {
    int tx = img.length;
    int ty = img[0].length;
    for ( int y = 0 ; y < ty ; y++ )
      for ( int x = 0 ; x < tx ; x++ ) {
        int xp = x+px;
        int yp = y+py;
        if ( ( xp >= 0 ) && ( yp >= 0 ) && ( xp < btx ) && ( yp < bty ) ) {
          int rouge = img[x][y]%256 ;
          int vert = (img[x][y]/256)%256;
          int bleu = img[x][y]/65536;
          int p = (xp+yp*btx)*3;
          buffer[p] = rouge;
          buffer[p+1] = vert;
          buffer[p+2] = bleu; } }
  }

  /**
    * Effacement de l'image.
    *
    */
  
  public static void clear() {
    int p = 0;
    for ( int x = 0 ; x < btx ; x++ )
      for ( int y = 0 ; y < bty ; y++ ) {
        buffer[p] = clearRouge;
        buffer[p+1] = clearVert;
        buffer[p+2] = clearBleu;
        p += 3; }
  }

  /**
    * Affichage de l'image.
    *
    */
  
  public static void flush() {
    synchronized (mf.mc) {
      while (dessin) {
        try {
          Thread.sleep(0,1000); }
        catch(Exception e) { } }
      dessin = true;
      mf.mc.repaint();
      while (dessin) {
        try {
          Thread.sleep(0,1000); }
        catch(Exception e) { } } }
  }

  /**
    * Interruption du fonctionnement de l'application.
    *
    */
  
  public static void exit() {
    System.exit(0);
  }

  /**
    * Retour du dernier caractere tape au clavier (caractere de code ASCII 0 si pas de caractere saisi au clavier).<br>
    * Attention : La detection se fait dans la fenetre graphique, pas dans la console texte.
    *
    * @return Le caractere lu.
    */
  
  public static char getKey() {
    if ( key.size() == 0 )
      return(0x00);
    Character c = key.remove(0);
    return(c.charValue());
  }

  /**
    * Effacement des eventuels caracteres bufferises dans le clavier.<br>
    *
    * @return Le nombre de caracteres effaces.
    */
  
  public static int flushKey() {
    int nbc = key.size();
    while ( key.size() != 0 )
      key.remove(0);
    return(nbc);
  }

  /**
    * Retour du code de la derniere touche "speciale" (touche de curseur, touches de fonction, ...) tapee au clavier (0 si pas de touche frappee).
    *
    * @return Le code de la touche frappee.
    */
  
  public static int getSpecialKey() {
    if ( specialKey.size() == 0 )
      return(0);
    Integer c = specialKey.remove(0);
    return(c.intValue());
  }

  /**
    * Retour de l'etat actuel de la souris (0 pour bouton non presse, 1 pour bouton presse, 2 pour clic realise).
    *
    * @return L'etat.
    */
  
  public static int getMouseState() {
    int m = mouseState;
    if ( mouseState == 2 )
      mouseState = 0;
    return(m);
  }

  /**
    * Retour du dernier bouton utilise de la souris (-1 pour pas de bouton utilise, 1 pour bouton gauche, 2 pour bouton central, 3 pour bouton droit).
    *
    * @return Le bouton utilise.
    */
  
  public static int getMouseButton() {
    return(mouseButton);
  }

  /**
    * Retour de la position en x de la souris au sein de la fenetre (-1 si en dehors).
    *
    * @return La position en x de la souris.
    */
  
  public static int getMouseX() {
    return(xMouse);
  }

  /**
    * Retour de la position en y de la souris au sein de la fenetre (-1 si en dehors).
    *
    * @return La position en y de la souris.
    */
  
  public static int getMouseY() {
    return(yMouse);
  }

  /**
    * Activation/desactivation du mode d'affichage xor (ou exclusif).<br>
    * Si activation du mode xor, desactivation automatique du mode alpha blending.
    *
    * @param state La valeur d'activation/desactivation.
    */
  
  public static void setXorMode(boolean state) {
    xorState = state;
    if ( state )
      alphaBlendingState = false;
  }

  /**
    * Activation/desactivation du mode d'affichage "alpha blendind" (transparence).<br>
    * Si activation du mode alphaBlending, desactivation automatique du mode xor.
    *
    * @param state La valeur d'activation/desactivation.
    */
  
  public static void setAlphaBlendingMode(boolean state) {
    alphaBlendingState = state;
    if ( state )
      xorState = false;
  }

  /**
    * Retour de la resolution en x de la surface d'affichage.
    *
    * @return La resolution en x de la surface d'affichage.
    */
  
  public static int getBufferWidth() {
    return btx;
  }

  /**
    * Retour de la resolution en y de la surface d'affichage.
    *
    * @return La resolution en y de la surface d'affichage.
    */
  
  public static int getBufferHeight() {
    return bty;
  }

  /**
    * Temporisation.
    *
    * @param ms Le nombre de millisecondes de temporisation.
    */
  
  public static void wait(int ms) {
    try {
      Thread.sleep(ms); }
    catch( Exception e) { }
  }

  private static void drawPixelClip(int x,int y) {
    if ( ( x < 0 ) || ( y < 0 )  || ( x >= btx ) || ( y >= bty ) )
      return;
    drawPixelSansClip(x,y);
  }

  private static void drawPixelSansClip(int x,int y) {
    if ( xorState ) {
      buffer[(x+y*btx)*3] = buffer[(x+y*btx)*3]^rouge ;
      buffer[(x+y*btx)*3+1] = buffer[(x+y*btx)*3+1]^vert ;
      buffer[(x+y*btx)*3+2] = buffer[(x+y*btx)*3+2]^bleu ;
      return; }
    if ( alphaBlendingState ) {
      { double val = (buffer[(x+y*btx)*3]*malpha+rouge*alpha);
        if ( val < 0.0 )
          val = 0.0; 
        if ( val > 255.0 )
          val = 255.0;
        buffer[(x+y*btx)*3] =(int) val; }
      { double val = (buffer[(x+y*btx)*3+1]*malpha+vert*alpha);
        if ( val < 0.0 )
          val = 0.0; 
        if ( val > 255.0 )
          val = 255.0;
        buffer[(x+y*btx)*3+1] =(int) val; }
      { double val = (buffer[(x+y*btx)*3+2]*malpha+bleu*alpha);
        if ( val < 0.0 )
          val = 0.0; 
        if ( val > 255.0 )
          val = 255.0;
        buffer[(x+y*btx)*3+2] =(int) val; }
      return; }
    buffer[(x+y*btx)*3] = rouge ;
    buffer[(x+y*btx)*3+1] = vert ;
    buffer[(x+y*btx)*3+2] = bleu ;
  }

  private static void drawPixelClip(int x,int y,int rouge,int vert,int bleu) {
    if ( ( x < 0 ) || ( y < 0 )  || ( x >= btx ) || ( y >= bty ) )
      return;
    drawPixelSansClip(x,y,rouge,vert,bleu);
  }

  private static void drawPixelSansClip(int x,int y,int rouge,int vert,int bleu) {
    if ( xorState ) {
      buffer[(x+y*btx)*3] = buffer[(x+y*btx)*3]^rouge ;
      buffer[(x+y*btx)*3+1] = buffer[(x+y*btx)*3+1]^vert ;
      buffer[(x+y*btx)*3+2] = buffer[(x+y*btx)*3+2]^bleu ; }
      else {
      buffer[(x+y*btx)*3] = rouge ;
      buffer[(x+y*btx)*3+1] = vert ;
      buffer[(x+y*btx)*3+2] = bleu ; }
  }

  private static void drawCaractere(int px,int py,int tx,int ty,short [] c) {
    for ( int y = 0 ; y < ty ; y++ ) {
      int val = c[y];
      for ( int x = 0 ; x < tx ; x++ ) {
        int a = (val>>x)&0x01;
        if ( a == 1 )
          drawPixelClip(px+tx-x,py-y); } }
  }

  private static void lineSansClip(int xi,int yi,int xf,int yf) {
    int dx,dy,xinc,yinc,cumul,x,y ;
    x = xi ;
    y = yi ;
    dx = xf - xi ;
    dy = yf - yi ;
    xinc = ( dx > 0 ) ? 1 : -1 ;
    yinc = ( dy > 0 ) ? 1 : -1 ;
    dx = Math.abs(dx) ;
    dy = Math.abs(dy) ;
    drawPixelSansClip(x,y) ;
    if ( dx > dy ) {
      cumul = dx / 2 ;
      for ( int i = 1 ; i <= dx ; i++ ) {
        x += xinc ;
        cumul += dy ;
        if ( cumul >= dx ) {
          cumul -= dx ;
          y += yinc ; }
        drawPixelSansClip(x,y) ; } }
      else {
      cumul = dy / 2 ;
      for ( int i = 1 ; i <= dy ; i++ ) {
        y += yinc ;
        cumul += dx ;
        if ( cumul >= dy ) {
          cumul -= dy ;
          x += xinc ; }
        drawPixelSansClip(x,y) ; } }
  }

  private static int code(double x,double y,int xmin,int ymin,int xmax,int ymax) { 
    int c ;
    if ( x < xmin )
      c = 1 ;
      else
      c = 0 ;
    if ( x > xmax )
      c += 2 ;
    if ( y < ymin )
      c += 4 ;
    if ( y > ymax )
      c += 8 ;
    return(c) ;
  }

  private static boolean code_nul(int c) { 
    return(c == 0) ;
  }

  private static boolean pas1commun(int c1,int c2) { 
    return((c1&c2) == 0) ;
  }

  private static boolean code0(int c) { 
    return((c&1) != 0) ;
  }

  private static boolean code1(int c) { 
    return((c&2) != 0) ;
  }

  private static boolean code2(int c) { 
    return((c&4) != 0) ;
  }

  private static boolean code3(int c) { 
    return((c&8) != 0) ;
  }

  private static double intersection(double ai,double bi,double af,double bf,double val) {
    double res = 0.0 ;
    if ( af != ai )
      res = (bi + (val-ai) / (af-ai) * (bf-bi)) ;
      else
      res = 1.0e10 ;
    return(res) ;
  }
  
  private static BufferedImage conversion(BufferedImage src) {
    if ( src.getType() == BufferedImage.TYPE_INT_RGB )
      return(src);
    src = convertion(src);
    return(src);
  }
  
  private static BufferedImage convertion(BufferedImage src) {
    BufferedImage dst = new BufferedImage(src.getWidth(),src.getHeight(),BufferedImage.TYPE_INT_RGB);
    Graphics2D g2 = dst.createGraphics();
    g2.drawImage((Image) src,0,0,new Button());
    return(dst);
  }

  /**
    * Chargement d'une image au format PNG.<br>
    *
    * @param filename Le nom du fichier PNG.
    * @return La matrice de pixels lue, null si la lecture echoue.
    */
  
  public static int [][] loadPNGFile(String filename) {
    BufferedImage image;
    try {
      image = conversion(ImageIO.read(new File(filename))); }
    catch(IOException e) { 
      image = null; }
    if ( image == null )
      return(null);
    int tx;
    while ( (tx = image.getWidth(mf)) == -1 );
    int ty = image.getHeight(mf);
    int [] pixels = image.getRaster().getPixels(0,0,tx,ty,(int []) null);
    int [][] img = new int[tx][ty];
    int p = 0;
    for ( int j = 0 ; j < ty ; j++ ) {
      for ( int i = 0 ; i < tx ; i++ ) {
        img[i][j] = pixels[p+2]*65536+pixels[p+1]*256+pixels[p];
        p += 3; } }
    return(img);
  }

  /**
    * Telechargement d'une image au format PNG.<br>
    *
    * @param url L'adresse internet (url) sur laquelle effectuer le telechargement.
    * @return La matrice de pixels lue, null si la lecture echoue.
    */
  
  public static int [][] downloadPNGFile(String url) {
    BufferedImage image;
    try {
      image = conversion(ImageIO.read(new URL(url))); }
    catch(Exception e) { 
      image = null; }
    if ( image == null )
      return(null);
    int tx;
    while ( (tx = image.getWidth(mf)) == -1 );
    int ty = image.getHeight(mf);
    int [] pixels = image.getRaster().getPixels(0,0,tx,ty,(int []) null);
    int [][] img = new int[tx][ty];
    int p = 0;
    for ( int j = 0 ; j < ty ; j++ ) {
      for ( int i = 0 ; i < tx ; i++ ) {
        img[i][j] = pixels[p+2]*65536+pixels[p+1]*256+pixels[p];
        p += 3; } }
    return(img);
  }

  /**
    * Changement de la taille de la fenetre d'affichage.<br>
    *
    * @param tx La nouvelle taille en x.
    * @param ty La nouvelle taille en y.
    */
  
  public static void setWindowSize(int tx,int ty) {
    mf.setSize(tx,ty);
  }

  /**
    * Activation/desactivation de la possibilite de changer la taille de la fenetre par l'utilisateur.<br>
    *
    * @param bool Le booleen indiquant si la fenetre est ajustable ou non.
    */
  
  public static void setWindowResizable(boolean bool) {
    mf.setResizable(bool);
  }
}